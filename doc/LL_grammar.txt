<program> -> import <function-list> <main> <function-list>
<main> -> pub fn main ( ) void { <statement-list> 
<function-list> -> <function> <function-list>
<function-list> -> $
<function> -> pub fn id ( <params> <type> { <statement-list> 
<params> -> id : <type> <params'>
<params> -> )
<params'> -> , <params> 
<params'> -> )
<statement-list> -> <if> <statement-list> <else> <statement-list>
<statement-list> -> <while> <statement-list>
<statement-list> -> <declaration> <statement-list>
<statement-list> -> id <id-action>
<statement-list> -> return <return'> <statement-list>
<statement-list> -> <embedded-func-call> <statement-list>
<statement-list> -> }
<id-action> -> <assignment>
<id-action> -> ( <func-call'>
<return'> -> <expression>
<return'> -> ;
<if> -> if(<if'>
<if'> -> id) |id| { <statement-list>
<if'> -> <expression>){ <statement-list>
<else> -> else { <statement-list> 
<while> -> while( <while'>
<while'> -> <expression> ) { <statement-list>
<while'> -> id) |id| { <statement-list>
<assignment> -> = <assignment'>
<assignment'> -> <operand> ;
<assignment'> -> id;
<assignment'> -> <expression>
<assignment'> -> <embedded-func-call>
<func-call> -> id( <func-call'>
<func-call'> -> )
<func-call'> -> <param-call>
<param-call> -> <operand> <param-call'>
<param-call'> -> )
<param-call'> -> ,<func-call'>
<embedded-func-call> -> ifj.<func-call>
<operand> -> int
<operand> -> float
<operand> -> literal
<operand> -> null
<declaration> -> const id <declaration'>
<declaration> -> var id <declaration'>
<declaration'> -> <assignment>
<declaration'> -> <type> <assignment>
<type> -> : <type'>
<type'> -> i32
<type'> -> f64
<type'> -> []u8
<type'> -> ?<type'>